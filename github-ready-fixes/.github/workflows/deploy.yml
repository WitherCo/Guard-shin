name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Create lock file if needed
      run: |
        if [ ! -f package-lock.json ]; then
          echo "Lock file not found, generating with npm install"
          npm install --package-lock-only
        fi
        
    - name: Install dependencies
      run: npm ci || npm install
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
        
    - name: Setup Database
      run: npm run db:push
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        PGHOST: ${{ secrets.PGHOST }}
        PGPORT: ${{ secrets.PGPORT }}
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/guard-shin:latest
          ghcr.io/${{ github.repository_owner }}/guard-shin:${{ github.sha }}
        build-args: |
          NODE_ENV=production
          
    - name: Deploy to Production
      run: |
        echo "Deployment complete! Container image is available at ghcr.io/${{ github.repository_owner }}/guard-shin:latest"
        
    - name: Send Discord notification
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.UPDATE_WEBHOOK_URL }}
      run: |
        if [ "$DISCORD_WEBHOOK" != "" ]; then
          if [ "${{ job.status }}" == "success" ]; then
            curl -H "Content-Type: application/json" -d '{"username": "GitHub Actions", "content": "Lifeless rose updated: üöÄ Deployment successful! Latest changes have been deployed to production."}' $DISCORD_WEBHOOK
          else
            curl -H "Content-Type: application/json" -d '{"username": "GitHub Actions", "content": "Lifeless rose updated: ‚ùå Deployment failed! Check GitHub Actions for details."}' $DISCORD_WEBHOOK
          fi
        fi
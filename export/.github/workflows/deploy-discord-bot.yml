name: Deploy Discord Bot

on:
  push:
    branches:
      - main
    paths:
      - 'cogs/**'
      - 'discord-bot/**'
      - 'run_bot.py'
      - '.github/workflows/deploy-discord-bot.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'  # Run twice daily to ensure the bot is running

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install discord.py==2.5.2 wavelink==3.2.0 python-dotenv==1.0.0 requests==2.31.0 aiohttp==3.9.1 psutil==5.9.6 python-dateutil==2.8.2 Pillow>=9.0.0 PyNaCl>=1.5.0
          
      - name: Prepare deployment files
        run: |
          # Create clean deployment directory
          mkdir -p discord-bot-files
          
          # Create empty env file (will be filled by hosting provider)
          touch discord-bot-files/.env
          
          # Copy main bot file
          if [ -f "run_bot.py" ]; then
            cp run_bot.py discord-bot-files/run.py
          else
            cp discord-bot/run.py discord-bot-files/run.py
          fi
          
          # Copy cogs directory
          mkdir -p discord-bot-files/cogs
          if [ -d "cogs" ]; then
            cp -r cogs/* discord-bot-files/cogs/
          elif [ -d "discord-bot/cogs" ]; then
            cp -r discord-bot/cogs/* discord-bot-files/cogs/
          fi
          
          # Create premium_guilds.json if it doesn't exist
          echo '{"guild_ids": []}' > discord-bot-files/premium_guilds.json
          
          # Create requirements.txt
          cat > discord-bot-files/requirements.txt << 'EOL'
discord.py==2.5.2
wavelink==3.2.0
python-dotenv==1.0.0
requests==2.31.0
aiohttp==3.9.1
psutil==5.9.6
python-dateutil==2.8.2
Pillow>=9.0.0
PyNaCl>=1.5.0
EOL
          
          # Copy deployment files for various platforms
          cp discord-bot/Procfile discord-bot-files/         # For Heroku
          cp discord-bot/runtime.txt discord-bot-files/      # For Heroku
          cp discord-bot/app.json discord-bot-files/         # For Heroku one-click deploy
          
          # Copy Render deployment files
          cp discord-bot/render.yaml discord-bot-files/      # For Render Blueprint
          cp discord-bot/RENDER_DEPLOYMENT.md discord-bot-files/
          
          # Copy Node.js wrapper for Render
          cp discord-bot/server.js discord-bot-files/
          cp discord-bot/package.json discord-bot-files/
          cp discord-bot/deploy_to_render.sh discord-bot-files/
          chmod +x discord-bot-files/deploy_to_render.sh
          
          # Create start script for general use
          cat > discord-bot-files/start.sh << 'EOL'
#!/bin/bash
python run.py
EOL
          chmod +x discord-bot-files/start.sh
          
      - name: Validate bot code
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GUARD_SHIN_BOT_TOKEN: ${{ secrets.GUARD_SHIN_BOT_TOKEN }}
        run: |
          echo "Validating Discord bot code"
          
          # Create test script for connection validation
          cat > discord-bot-files/validate.py << 'EOL'
import asyncio
import discord
import os
import sys

class ValidationBot(discord.Client):
    async def on_ready(self):
        print(f'✅ Successfully connected to Discord as {self.user}')
        print(f'Bot is in {len(self.guilds)} servers')
        await self.close()

async def main():
    intents = discord.Intents.default()
    intents.guilds = True
    client = ValidationBot(intents=intents)
    
    # Check for token in environment
    token = os.getenv('DISCORD_BOT_TOKEN') or os.getenv('GUARD_SHIN_BOT_TOKEN')
    if not token:
        print("❌ ERROR: No Discord token found in environment variables")
        sys.exit(1)
        
    try:
        await client.start(token)
    except discord.errors.LoginFailure:
        print("❌ ERROR: Invalid Discord token")
        sys.exit(1)
    except Exception as e:
        print(f"❌ ERROR: Failed to connect: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
EOL
          
          # Run validation
          cd discord-bot-files
          python validate.py
          
      - name: Deploy to GitHub branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git
          git config --global user.name "Guard-shin Bot"
          git config --global user.email "actions@github.com"
          
          # Create a dedicated deployment branch
          git checkout --orphan discord-bot-deployment
          git rm -rf .
          
          # Copy all deployment files
          cp -r discord-bot-files/* .
          
          # Create README with deployment instructions
          cat > README.md << 'EOL'
# Guard-shin Discord Bot

This branch contains the deployable Discord bot code for Guard-shin, an advanced Discord moderation and security bot.

## Quick Deployment Options

### Deploy to Render (Recommended)

[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy)

#### Quick Render Setup:

1. Login to [Render Dashboard](https://dashboard.render.com)
2. Click **New** → **Web Service**
3. Connect your GitHub account and select this repository
4. Configure the service:
   - Root Directory: `.` (this directory)
   - Environment: **Node**
   - Build Command: `npm install && pip install -r requirements.txt`
   - Start Command: `node server.js`
5. Add environment variable: `DISCORD_BOT_TOKEN`
6. In **Advanced** settings, set Health Check Path to `/health`
7. Click **Create Web Service**

For detailed deployment instructions, see [RENDER_DEPLOYMENT.md](./RENDER_DEPLOYMENT.md)

### Deploy to Heroku

[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

## Environment Variables

| Variable | Required | Description |
|----------|----------|-------------|
| `DISCORD_BOT_TOKEN` | Yes | Your Discord bot token |
| `STRIPE_SECRET_KEY` | No | For premium payment processing |
| `PAYMENT_WEBHOOK_URL` | No | For payment notifications |
| `UPDATE_WEBHOOK_URL` | No | For bot update notifications |

## Features

- Advanced server moderation and security
- Automatic raid protection
- Music commands (premium)
- Customizable welcome messages
- And much more!

This deployment was generated automatically on $(date -u +'%Y-%m-%d') via GitHub Actions.
EOL
          
          # Add, commit and push
          git add .
          git commit -m "Deploy Discord bot - $(date -u +'%Y-%m-%d %H:%M:%S')"
          git push -f origin discord-bot-deployment
          
          echo "✅ Bot successfully deployed to discord-bot-deployment branch"
          echo "🚀 You can now deploy the bot to Heroku, Render, or other hosting services"
          
      - name: Run temporary test instance
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GUARD_SHIN_BOT_TOKEN: ${{ secrets.GUARD_SHIN_BOT_TOKEN }}
        run: |
          echo "🔄 Starting temporary test instance..."
          cd discord-bot-files
          
          # Run for a short time to ensure everything works
          # Using timeout to limit runtime and ensure workflow completes
          timeout 2m python run.py || echo "Test run completed"
          
          echo "✅ Bot test complete. Check the GitHub Actions logs for any errors."
          echo "💡 For 24/7 operation, connect Heroku, Render, or another hosting service to the discord-bot-deployment branch."